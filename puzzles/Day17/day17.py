from collections import defaultdict

from util import *


def test(start_x, start_y, x_from, x_to, y_from, y_to):
    x = 0
    y = 0
    v_x = start_x
    v_y = start_y
    in_target = False
    max_height = None
    while True:
        x += v_x
        y += v_y
        if max_height is None or y > max_height:
            max_height = y
        if v_x < 0:
            v_x += 1
        elif v_x > 0:
            v_x -= 1
        v_y -= 1
        if x_from <= x <= x_to and y_from <= y <= y_to:
            in_target = True
        if (v_y < 0 and y < y_from and y < y_to):
            return in_target, max_height


def sweep_x(start_x, start_y, x_from, x_to, y_from, y_to):
    has_been_in_target = False
    max_y = None

    for i in range(100):
        in_target, max_height = test(start_x + i, start_y, x_from, x_to, y_from, y_to)
        if in_target:
            has_been_in_target = True
            if max_y is None or max_height > max_y:
                max_y = max_height
        if (not in_target) and has_been_in_target:
            return max_y, start_x + i
        in_target, max_height = test(start_x - i, start_y, x_from, x_to, y_from, y_to)
        if in_target:
            has_been_in_target = True
            if max_y is None or max_height > max_y:
                max_y = max_height
        if (not in_target) and has_been_in_target:
            return max_y, start_x - i
    return max_y, start_x + 1


def sweep_y(start_x, start_y, x_from, x_to, y_from, y_to):
    has_been_in_target = False
    max_y = None

    for i in range(100):
        in_target, max_height = test(start_x, start_y + i, x_from, x_to, y_from, y_to)
        if in_target:
            has_been_in_target = True
            if max_y is None or max_height > max_y:
                max_y = max_height
        if (not in_target) and has_been_in_target:
            return max_y, start_y + i
        in_target, max_height = test(start_x, start_y - i, x_from, x_to, y_from, y_to)
        if in_target:
            has_been_in_target = True
            if max_y is None or max_height > max_y:
                max_y = max_height
        if (not in_target) and has_been_in_target:
            return max_y, start_y - i
    return max_y, start_x + 1


def part1():
    line = read_input_as_lines()[0]
    # line = 'target area: x=20..30, y=-10..-5'
    target_x_from = int(line.split('target area: x=')[1].split('..')[0])
    target_x_to = int(line.split('target area: x=')[1].split('..')[1].split(', ')[0])
    target_y_from = int(line.split('y=')[1].split('..')[0])
    target_y_to = int(line.split('y=')[1].split('..')[1])

    max_y = None
    # start_x = 1
    # start_y = 1
    #
    # change = True
    # while change or max_y is None:
    #     change = False
    #     max_height, start_x = sweep_x(start_x, start_y, target_x_from, target_x_to, target_y_from, target_y_to)
    #     if max_height is not None and (max_y is None or max_height > max_y):
    #         max_y = max_height
    #         change = True
    #     max_height, start_y = sweep_y(start_x, start_y, target_x_from, target_x_to, target_y_from, target_y_to)
    #     if max_height is not None and (max_y is None or max_height > max_y):
    #         max_y = max_height
    #         change = True
    best = None
    for v_x in range(200):
        for v_y in range(-150, 500):
            in_target, max_height = test(v_x, v_y, target_x_from, target_x_to, target_y_from, target_y_to)
            if in_target:
                if max_y is None or max_height > max_y:
                    max_y = max_height
                    best = (v_x, v_y)
    print(best)
    return max_y


def reverse_from_target_point(start_x, start_y):
    x = start_x
    y = start_y
    v_x = 0
    v_y = 0
    while True:
        if x == 0 and y == 0:
            return -v_x, -v_y
        v_y += 1
        if x < 0:
            v_x -= 1
        elif x > 0:
            v_x += 1
        y += v_y
        x += v_x
        if (start_x > 0 and x < 0) or (start_x < 0 and x > 0) or \
                (start_y > 0 and y < 0) or (start_y < 0 and y > 0):
            return None, None


def startx_works_for_target(start_x, x_from, x_to):
    x = 0
    v_x = start_x
    if start_x == 0 and not (x_from < 0 < x_to):
        return False, -1
    if x_from > 0 and x_to > 0 and start_x < 0:
        return False, -1
    if x_from < 0 and x_to < 0 and start_x > 0:
        return False, -1
    n_steps = 0
    while True:
        n_steps += 1
        x += v_x
        if v_x < 0:
            v_x += 1
        elif v_x > 0:
            v_x -= 1
        if x_from <= x <= x_to:
            return True, n_steps
        elif v_x == 0:
            return False, -1
        if (0 > x_from > x and 0 > x_to > x) or \
                (0 < x_from < x and 0 < x_to < x):
            return False, -1


def get_y_for_start_y_and_steps(start_y, n_steps):
    y = 0
    v_y = start_y
    for _ in range(n_steps):
        y += v_y
        v_y -= 1
    return y


def part2():
    line = read_input_as_lines()[0]
    # line = 'target area: x=20..30, y=-10..-5'
    # target_x_from = int(line.split('target area: x=')[1].split('..')[0])
    # target_x_to = int(line.split('target area: x=')[1].split('..')[1].split(', ')[0])
    # target_y_from = int(line.split('y=')[1].split('..')[0])
    # target_y_to = int(line.split('y=')[1].split('..')[1])
    target_x_from = 56
    target_x_to = 76
    target_y_from = -162
    target_y_to = -134

    # for point_x in range(target_x_from, target_x_to + 1):
    #     for point_y in range(target_y_from, target_y_to + 1):
    #         print(reverse_from_target_point(point_x, point_y))
    steps_per_v_x_that_work = defaultdict(list)
    for v_x in range(77):
        for target_x in range(min((target_x_to, target_x_from)), max((target_x_to, target_x_from)) + 1):
            works, steps = startx_works_for_target(v_x, target_x, target_x)
            if works:
                steps_per_v_x_that_work[v_x].append(steps)
    print(steps_per_v_x_that_work)

    works = []
    for v_x in steps_per_v_x_that_work.keys():
        for v_y in range(-165, 1000):
            if v_y % 100 == 0:
                print(v_y)
            in_target, max_height = test(v_x, v_y, target_x_from, target_x_to, target_y_from, target_y_to)
            if in_target:
                works.append((v_x, v_y))
    print(sorted(works))
    # works = [(11, -20), (11, -19), (11, -18), (11, -17), (11, -16), (11, -15), (11, -14), (11, -13), (11, -12),
    #          (11, -11), (11, -10), (11, -9), (11, -8), (11, -7), (11, -6), (11, -5), (11, -4), (11, -3), (11, -2),
    #          (11, -1), (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9),
    #          (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19),
    #          (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29),
    #          (11, 31), (11, 32), (11, 33), (11, 34), (11, 35), (11, 36), (11, 37), (11, 38), (11, 43), (11, 44),
    #          (11, 45), (11, 46), (11, 47), (11, 48), (11, 49), (11, 50), (11, 51), (11, 52), (11, 66), (11, 67),
    #          (11, 68), (11, 69), (11, 70), (11, 71), (11, 72), (11, 73), (11, 74), (11, 75), (11, 76), (11, 77),
    #          (11, 78), (11, 79), (11, 133), (11, 134), (11, 135), (11, 136), (11, 137), (11, 138), (11, 139), (11, 140),
    #          (11, 141), (11, 142), (11, 143), (11, 144), (11, 145), (11, 146), (11, 147), (11, 148), (11, 149),
    #          (11, 150), (11, 151), (11, 152), (11, 153), (11, 154), (11, 155), (11, 156), (11, 157), (11, 158),
    #          (11, 159), (11, 160), (11, 161), (12, -24), (12, -23), (12, -22), (12, -21), (12, -20), (12, -19),
    #          (12, -18), (12, -17), (12, -16), (12, -15), (12, -14), (12, -13), (12, -12), (12, -11), (12, -10),
    #          (12, -9), (13, -24), (13, -23), (13, -22), (13, -21), (13, -20), (13, -19), (13, -18), (13, -17),
    #          (13, -16), (13, -15), (13, -14), (14, -30), (14, -29), (14, -28), (14, -27), (14, -26), (14, -25),
    #          (14, -24), (14, -23), (14, -22), (14, -21), (14, -20), (15, -30), (15, -29), (15, -28), (15, -27),
    #          (15, -26), (15, -25), (15, -24), (15, -23), (15, -22), (15, -21), (15, -20), (16, -39), (16, -38),
    #          (16, -37), (16, -36), (16, -35), (16, -34), (16, -33), (16, -32), (16, -30), (16, -29), (16, -28),
    #          (16, -27), (16, -26), (16, -25), (17, -39), (17, -38), (17, -37), (17, -36), (17, -35), (17, -34),
    #          (17, -33), (17, -32), (17, -30), (17, -29), (17, -28), (17, -27), (17, -26), (17, -25), (18, -39),
    #          (18, -38), (18, -37), (18, -36), (18, -35), (18, -34), (18, -33), (18, -32), (19, -39), (19, -38),
    #          (19, -37), (19, -36), (19, -35), (19, -34), (19, -33), (19, -32), (20, -53), (20, -52), (20, -51),
    #          (20, -50), (20, -49), (20, -48), (20, -47), (20, -46), (20, -45), (20, -44), (20, -39), (20, -38),
    #          (20, -37), (20, -36), (20, -35), (20, -34), (20, -33), (20, -32), (21, -53), (21, -52), (21, -51),
    #          (21, -50), (21, -49), (21, -48), (21, -47), (21, -46), (21, -45), (21, -44), (22, -53), (22, -52),
    #          (22, -51), (22, -50), (22, -49), (22, -48), (22, -47), (22, -46), (22, -45), (22, -44), (23, -53),
    #          (23, -52), (23, -51), (23, -50), (23, -49), (23, -48), (23, -47), (23, -46), (23, -45), (23, -44),
    #          (24, -53), (24, -52), (24, -51), (24, -50), (24, -49), (24, -48), (24, -47), (24, -46), (24, -45),
    #          (24, -44), (25, -53), (25, -52), (25, -51), (25, -50), (25, -49), (25, -48), (25, -47), (25, -46),
    #          (25, -45), (25, -44), (26, -53), (26, -52), (26, -51), (26, -50), (26, -49), (26, -48), (26, -47),
    #          (26, -46), (26, -45), (26, -44), (29, -80), (29, -79), (29, -78), (29, -77), (29, -76), (29, -75),
    #          (29, -74), (29, -73), (29, -72), (29, -71), (29, -70), (29, -69), (29, -68), (29, -67), (30, -80),
    #          (30, -79), (30, -78), (30, -77), (30, -76), (30, -75), (30, -74), (30, -73), (30, -72), (30, -71),
    #          (30, -70), (30, -69), (30, -68), (30, -67), (31, -80), (31, -79), (31, -78), (31, -77), (31, -76),
    #          (31, -75), (31, -74), (31, -73), (31, -72), (31, -71), (31, -70), (31, -69), (31, -68), (31, -67),
    #          (32, -80), (32, -79), (32, -78), (32, -77), (32, -76), (32, -75), (32, -74), (32, -73), (32, -72),
    #          (32, -71), (32, -70), (32, -69), (32, -68), (32, -67), (33, -80), (33, -79), (33, -78), (33, -77),
    #          (33, -76), (33, -75), (33, -74), (33, -73), (33, -72), (33, -71), (33, -70), (33, -69), (33, -68),
    #          (33, -67), (34, -80), (34, -79), (34, -78), (34, -77), (34, -76), (34, -75), (34, -74), (34, -73),
    #          (34, -72), (34, -71), (34, -70), (34, -69), (34, -68), (34, -67), (35, -80), (35, -79), (35, -78),
    #          (35, -77), (35, -76), (35, -75), (35, -74), (35, -73), (35, -72), (35, -71), (35, -70), (35, -69),
    #          (35, -68), (35, -67), (36, -80), (36, -79), (36, -78), (36, -77), (36, -76), (36, -75), (36, -74),
    #          (36, -73), (36, -72), (36, -71), (36, -70), (36, -69), (36, -68), (36, -67), (37, -80), (37, -79),
    #          (37, -78), (37, -77), (37, -76), (37, -75), (37, -74), (37, -73), (37, -72), (37, -71), (37, -70),
    #          (37, -69), (37, -68), (37, -67), (38, -80), (38, -79), (38, -78), (38, -77), (38, -76), (38, -75),
    #          (38, -74), (38, -73), (38, -72), (38, -71), (38, -70), (38, -69), (38, -68), (38, -67), (56, -162),
    #          (56, -161), (56, -160), (56, -159), (56, -158), (56, -157), (56, -156), (56, -155), (56, -154), (56, -153),
    #          (56, -152), (56, -151), (56, -150), (56, -149), (56, -148), (56, -147), (56, -146), (56, -145), (56, -144),
    #          (56, -143), (56, -142), (56, -141), (56, -140), (56, -139), (56, -138), (56, -137), (56, -136), (56, -135),
    #          (56, -134), (57, -162), (57, -161), (57, -160), (57, -159), (57, -158), (57, -157), (57, -156), (57, -155),
    #          (57, -154), (57, -153), (57, -152), (57, -151), (57, -150), (57, -149), (57, -148), (57, -147), (57, -146),
    #          (57, -145), (57, -144), (57, -143), (57, -142), (57, -141), (57, -140), (57, -139), (57, -138), (57, -137),
    #          (57, -136), (57, -135), (57, -134), (58, -162), (58, -161), (58, -160), (58, -159), (58, -158), (58, -157),
    #          (58, -156), (58, -155), (58, -154), (58, -153), (58, -152), (58, -151), (58, -150), (58, -149), (58, -148),
    #          (58, -147), (58, -146), (58, -145), (58, -144), (58, -143), (58, -142), (58, -141), (58, -140), (58, -139),
    #          (58, -138), (58, -137), (58, -136), (58, -135), (58, -134), (59, -162), (59, -161), (59, -160), (59, -159),
    #          (59, -158), (59, -157), (59, -156), (59, -155), (59, -154), (59, -153), (59, -152), (59, -151), (59, -150),
    #          (59, -149), (59, -148), (59, -147), (59, -146), (59, -145), (59, -144), (59, -143), (59, -142), (59, -141),
    #          (59, -140), (59, -139), (59, -138), (59, -137), (59, -136), (59, -135), (59, -134), (60, -162), (60, -161),
    #          (60, -160), (60, -159), (60, -158), (60, -157), (60, -156), (60, -155), (60, -154), (60, -153), (60, -152),
    #          (60, -151), (60, -150), (60, -149), (60, -148), (60, -147), (60, -146), (60, -145), (60, -144), (60, -143),
    #          (60, -142), (60, -141), (60, -140), (60, -139), (60, -138), (60, -137), (60, -136), (60, -135), (60, -134),
    #          (61, -162), (61, -161), (61, -160), (61, -159), (61, -158), (61, -157), (61, -156), (61, -155), (61, -154),
    #          (61, -153), (61, -152), (61, -151), (61, -150), (61, -149), (61, -148), (61, -147), (61, -146), (61, -145),
    #          (61, -144), (61, -143), (61, -142), (61, -141), (61, -140), (61, -139), (61, -138), (61, -137), (61, -136),
    #          (61, -135), (61, -134), (62, -162), (62, -161), (62, -160), (62, -159), (62, -158), (62, -157), (62, -156),
    #          (62, -155), (62, -154), (62, -153), (62, -152), (62, -151), (62, -150), (62, -149), (62, -148), (62, -147),
    #          (62, -146), (62, -145), (62, -144), (62, -143), (62, -142), (62, -141), (62, -140), (62, -139), (62, -138),
    #          (62, -137), (62, -136), (62, -135), (62, -134), (63, -162), (63, -161), (63, -160), (63, -159), (63, -158),
    #          (63, -157), (63, -156), (63, -155), (63, -154), (63, -153), (63, -152), (63, -151), (63, -150), (63, -149),
    #          (63, -148), (63, -147), (63, -146), (63, -145), (63, -144), (63, -143), (63, -142), (63, -141), (63, -140),
    #          (63, -139), (63, -138), (63, -137), (63, -136), (63, -135), (63, -134), (64, -162), (64, -161), (64, -160),
    #          (64, -159), (64, -158), (64, -157), (64, -156), (64, -155), (64, -154), (64, -153), (64, -152), (64, -151),
    #          (64, -150), (64, -149), (64, -148), (64, -147), (64, -146), (64, -145), (64, -144), (64, -143), (64, -142),
    #          (64, -141), (64, -140), (64, -139), (64, -138), (64, -137), (64, -136), (64, -135), (64, -134), (65, -162),
    #          (65, -161), (65, -160), (65, -159), (65, -158), (65, -157), (65, -156), (65, -155), (65, -154), (65, -153),
    #          (65, -152), (65, -151), (65, -150), (65, -149), (65, -148), (65, -147), (65, -146), (65, -145), (65, -144),
    #          (65, -143), (65, -142), (65, -141), (65, -140), (65, -139), (65, -138), (65, -137), (65, -136), (65, -135),
    #          (65, -134), (66, -162), (66, -161), (66, -160), (66, -159), (66, -158), (66, -157), (66, -156), (66, -155),
    #          (66, -154), (66, -153), (66, -152), (66, -151), (66, -150), (66, -149), (66, -148), (66, -147), (66, -146),
    #          (66, -145), (66, -144), (66, -143), (66, -142), (66, -141), (66, -140), (66, -139), (66, -138), (66, -137),
    #          (66, -136), (66, -135), (66, -134), (67, -162), (67, -161), (67, -160), (67, -159), (67, -158), (67, -157),
    #          (67, -156), (67, -155), (67, -154), (67, -153), (67, -152), (67, -151), (67, -150), (67, -149), (67, -148),
    #          (67, -147), (67, -146), (67, -145), (67, -144), (67, -143), (67, -142), (67, -141), (67, -140), (67, -139),
    #          (67, -138), (67, -137), (67, -136), (67, -135), (67, -134), (68, -162), (68, -161), (68, -160), (68, -159),
    #          (68, -158), (68, -157), (68, -156), (68, -155), (68, -154), (68, -153), (68, -152), (68, -151), (68, -150),
    #          (68, -149), (68, -148), (68, -147), (68, -146), (68, -145), (68, -144), (68, -143), (68, -142), (68, -141),
    #          (68, -140), (68, -139), (68, -138), (68, -137), (68, -136), (68, -135), (68, -134), (69, -162), (69, -161),
    #          (69, -160), (69, -159), (69, -158), (69, -157), (69, -156), (69, -155), (69, -154), (69, -153), (69, -152),
    #          (69, -151), (69, -150), (69, -149), (69, -148), (69, -147), (69, -146), (69, -145), (69, -144), (69, -143),
    #          (69, -142), (69, -141), (69, -140), (69, -139), (69, -138), (69, -137), (69, -136), (69, -135), (69, -134),
    #          (70, -162), (70, -161), (70, -160), (70, -159), (70, -158), (70, -157), (70, -156), (70, -155), (70, -154),
    #          (70, -153), (70, -152), (70, -151), (70, -150), (70, -149), (70, -148), (70, -147), (70, -146), (70, -145),
    #          (70, -144), (70, -143), (70, -142), (70, -141), (70, -140), (70, -139), (70, -138), (70, -137), (70, -136),
    #          (70, -135), (70, -134), (71, -162), (71, -161), (71, -160), (71, -159), (71, -158), (71, -157), (71, -156),
    #          (71, -155), (71, -154), (71, -153), (71, -152), (71, -151), (71, -150), (71, -149), (71, -148), (71, -147),
    #          (71, -146), (71, -145), (71, -144), (71, -143), (71, -142), (71, -141), (71, -140), (71, -139), (71, -138),
    #          (71, -137), (71, -136), (71, -135), (71, -134), (72, -162), (72, -161), (72, -160), (72, -159), (72, -158),
    #          (72, -157), (72, -156), (72, -155), (72, -154), (72, -153), (72, -152), (72, -151), (72, -150), (72, -149),
    #          (72, -148), (72, -147), (72, -146), (72, -145), (72, -144), (72, -143), (72, -142), (72, -141), (72, -140),
    #          (72, -139), (72, -138), (72, -137), (72, -136), (72, -135), (72, -134), (73, -162), (73, -161), (73, -160),
    #          (73, -159), (73, -158), (73, -157), (73, -156), (73, -155), (73, -154), (73, -153), (73, -152), (73, -151),
    #          (73, -150), (73, -149), (73, -148), (73, -147), (73, -146), (73, -145), (73, -144), (73, -143), (73, -142),
    #          (73, -141), (73, -140), (73, -139), (73, -138), (73, -137), (73, -136), (73, -135), (73, -134), (74, -162),
    #          (74, -161), (74, -160), (74, -159), (74, -158), (74, -157), (74, -156), (74, -155), (74, -154), (74, -153),
    #          (74, -152), (74, -151), (74, -150), (74, -149), (74, -148), (74, -147), (74, -146), (74, -145), (74, -144),
    #          (74, -143), (74, -142), (74, -141), (74, -140), (74, -139), (74, -138), (74, -137), (74, -136), (74, -135),
    #          (74, -134), (75, -162), (75, -161), (75, -160), (75, -159), (75, -158), (75, -157), (75, -156), (75, -155),
    #          (75, -154), (75, -153), (75, -152), (75, -151), (75, -150), (75, -149), (75, -148), (75, -147), (75, -146),
    #          (75, -145), (75, -144), (75, -143), (75, -142), (75, -141), (75, -140), (75, -139), (75, -138), (75, -137),
    #          (75, -136), (75, -135), (75, -134)]

    return len(works)


if __name__ == '__main__':
    # print(part1())
    print(part2())
